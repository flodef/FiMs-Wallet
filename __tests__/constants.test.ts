// Generated by CodiumAI
import { getFormattedDate } from '../app/utils/constants';

describe('getFormattedDate', () => {
  // Returns a formatted string representing the current date in the format "YYYY-MM-DD" when no arguments are provided.
  it('should return a formatted string representing the current date when no arguments are provided', () => {
    const currentDate = new Date();
    const formattedDate = getFormattedDate();
    const expectedDate =
      currentDate.getFullYear() +
      '-' +
      ('0' + (currentDate.getMonth() + 1)).slice(-2) +
      '-' +
      ('0' + currentDate.getDate()).slice(-2);
    expect(formattedDate).toBe(expectedDate);
  });

  // Returns a formatted string representing the provided date in the format "YYYY-MM-DD" when a valid date object is provided.
  it('should return a formatted string representing the provided date when a valid date object is provided', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date);
    expect(formattedDate).toBe('2022-01-01');
  });

  // Returns a formatted string representing the provided date with precision set to 0.
  it('should return a formatted string representing the provided date with precision set to 1', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date, 0);
    expect(formattedDate).toBe('2022');
  });

  // Returns a formatted string representing the provided date with precision set to 1.
  it('should return a formatted string representing the provided date with precision set to 1', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date, 1);
    expect(formattedDate).toBe('2022');
  });

  // Returns a formatted string representing the provided date in the format "YYYY-MM" when precision is set to 2.
  it('should return a formatted string representing the provided date when precision is set to 2', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date, 2);
    expect(formattedDate).toBe('2022-01');
  });

  // Returns a formatted string representing the provided date with precision set to 3.
  it('should return a formatted string representing the provided date with precision set to 4', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date, 3);
    expect(formattedDate).toBe('2022-01-01');
  });

  // Returns a formatted string representing the provided date with precision set to 4.
  it('should return a formatted string representing the provided date with precision set to 4', () => {
    const date = new Date('2022-01-01');
    const formattedDate = getFormattedDate(date, 4);
    expect(formattedDate).toBe('2022-01-01');
  });

  // Returns a formatted string representing the provided date in the format "YYYY-MM-DD" when the date object is at the minimum valid value.
  it('should return a formatted string representing the provided date when the date object is at the minimum valid value', () => {
    const date = new Date(-8640000000000000);
    const formattedDate = getFormattedDate(date);
    expect(formattedDate).toBe('-271821-04-20');
  });

  // Returns a formatted string representing the provided date in the format "YYYY-MM-DD" when the date object is at the maximum valid value.
  it('should return a formatted string representing the provided date when the date object is at the maximum valid value', () => {
    const date = new Date(8640000000000000);
    const formattedDate = getFormattedDate(date);
    expect(formattedDate).toBe('275760-09-13');
  });

  // Returns a formatted string representing the provided date in the format "YYYY-MM-DD" when the date object is at a leap year.
  it('should return a formatted string representing the provided date when the date object is at a leap year', () => {
    const date = new Date('2020-02-29');
    const formattedDate = getFormattedDate(date);
    expect(formattedDate).toBe('2020-02-29');
  });

  // Returns an empty string when an invalid date object is provided.
  it('should return an empty string when an invalid date object is provided', () => {
    const date = new Date('invalid');
    const formattedDate = getFormattedDate(date);
    expect(formattedDate).toBe('');
  });

  // Returns a formatted string representing the current date with precision set to 1.
  it('should return a formatted string representing the current date with precision set to 1', () => {
    const currentDate = new Date();
    const formattedDate = getFormattedDate(currentDate, 1);
    const expectedDate = currentDate.getFullYear().toString();
    expect(formattedDate).toBe(expectedDate);
  });
});
